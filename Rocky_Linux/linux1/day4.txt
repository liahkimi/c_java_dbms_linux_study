[2024.02.25]

[파일 내용 비교]
01. diff
#diff [파일1] [파일2]

02. cmp

03. comm

//두 파일이 어느 줄이 다른지 알려줌
[root@localhost korea]# diff passwd passwd7
[root@localhost korea]# vi passwd7
[root@localhost korea]# diff passwd passwd7
1c1
< root:x:0:0:root:/root:/bin/bash
---
> testroot:x:0:0:root:/root:/bin/bash

//cmp -바이트 차이 알려줌
[root@localhost korea]# cmp passwd passwd7
passwd passwd7 differ: byte 66, line 3

//comm 
[root@localhost korea]# comm passwd passwd7
		root:x:0:0:root:/root:/bin/bash
		bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
comm: file 1 is not in sorted order
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
...........long

=======================================
[파일 압축/해제]
01. gzip
<압축>
#gzip [옵션][파일명]
<옵션>
-1 : 최저 압축율
-6 : 중간(기본)
-9 : 최대 압축율

>확장자: *.gzip

//2104바이트 -> 867바이트로 압축
[root@localhost korea]# gzip passwd
[root@localhost korea]# ll
합계 8
-rw-r--r--. 1 root root  867  2월 25 14:13 passwd.gz
-rw-r--r--. 1 root root 2136  2월 25 14:18 passwd7

//빈파일은 압축하면 바이트 늘어남 -file0
//압축을 하는데 헤더가 추가되므로 원래 0인건 압축하면
//크기 늘어남
-rw-r--r--. 1 root root    0  2월 25 14:26 file0
-rw-r--r--. 1 root root  867  2월 25 14:13 passwd.gz
-rw-r--r--. 1 root root 2136  2월 25 14:18 passd7
[root@localhost korea]# gzip file0 
[root@localhost korea]# ll
합계 12
-rw-r--r--. 1 root root   26  2월 25 14:26 file0.gz
-rw-r--r--. 1 root root  867  2월 25 14:13 passwd.gz
-rw-r--r--. 1 root root 2136  2월 25 14:18 passwd7
[root@localhost korea]# 

//gzip p* <- p로시작하는 파일명 한꺼번에 압축하기
[root@localhost korea]# gzip p*
[root@localhost korea]# ll
합계 12
-rw-r--r--. 1 root root  26  2월 25 14:26 file0.gz
-rw-r--r--. 1 root root 867  2월 25 14:13 passwd.gz
-rw-r--r--. 1 root root 873  2월 25 14:18 passwd7.gz


<압축 해제>
#gzip -d  [압축 파일명].gz
#gunzip [압축파일명].gz

//#gzip -d
root@localhost korea]# gzip -d passwd7.gz
[root@localhost korea]# ll
합계 12
-rw-r--r--. 1 root root   26  2월 25 14:26 file0.gz
-rw-r--r--. 1 root root  867  2월 25 14:13 passwd.gz
-rw-r--r--. 1 root root 2136  2월 25 14:18 passwd7

//#gunzip 
[root@localhost korea]# gunzip passwd7.gz
[root@localhost korea]# ll
합계 12
-rw-r--r--. 1 root root   26  2월 25 14:26 file0.gz
-rw-r--r--. 1 root root  867  2월 25 14:13 passwd.gz
-rw-r--r--. 1 root root 2136  2월 25 14:18 passwd7

----------------------------------------------------------------
02. bzip2
<압축>
#bzip2 [옵션] [압축 파일명]
#bzip2 passwd
>확장자: *.bz2
 
<해제>
#bzip2 -d passwd.bz2
#bunzip2 passwd.bz2

-------------------------------------------------------------------
03. xz
<압축>
#xz [옵션] [압축 파일명]
#xz passwd
>확장자 : *.xz

<해제>
#xz -d passwd.xz
#unxz passwd.xz

--------------------------------------------------------------------
04. compress / uncompress (교육용/사용 방식 다름)
>확장자: *.Z

-------------------------------------------------------------------
*여러개의 파일 한번에 압축하기

//#gzip passwd shadow <- passwd와 shadow파일 압축
[root@localhost korea]# gzip passwd shadow 
[root@localhost korea]# ll
합계 8
-rw-r--r--. 1 root root 867  2월 25 14:44 passwd.gz
----------. 1 root root 484  2월 25 14:45 shadow.gz
[root@localhost korea]# 

=======================================
[파일/디렉터리 묶기/해제]
#tar [옵션] [묶은 파일명] [묶을 파일명]
#tar -cvf test.tar passwd passwd7
<옵션>
-c : 묶기
-x : 해제
-v : 과정 출력
-f : 파일 지정 //가장뒤에 둬야함
-z : gzip 압축
(-Z : compress /리눅스x 수업용)
-j : bzip2
-J : xz
-t : 해제하지 않고 목록 출력
-r : 기존 묶음 파일에 파일 추가


//#tar -cvf test.tar passwd passwd7 //묶기
//#tar -xvf test.tar  //묶은것 해제
//#tar -cvzf test.tar *  //모두 압축해서 묶기
//#tar -xvzf test.tar //압축해제해서 해제하기

//-t옵션
//# tar -tvf test2.tar
//묶어놓은 파일 내부에 어떤 파일이 있는지 보여줌
[root@localhost korea]# tar -tvf test2.tar
-rw-r--r-- root/root         0 2024-02-25 15:04 file1
-rw-r--r-- root/root         0 2024-02-25 15:04 file2

//주의: 해제한다고 해서 묶어놨던 파일이 없어지거나
//그 안에 묶어놨던게 사라지는 것이 아님!!!

//한번 압축된건 압축안됨.
//tar -cvzf 한걸 또 gzip하면 안됨.

//**쓰레기 데이터 파일 만들기
# fallocate -l  100M file100.txt

//-r옵션
//기존 묵음 파일인 test.tar에 없던 file6 넣어주기
[root@localhost korea]# tar -rvf test.tar file6
file6
[root@localhost korea]# tar -tvf test.tar
drwxr-xr-x root/root         0 2024-02-25 15:04 dir1/
drwxr-xr-x root/root         0 2024-02-25 15:04 dir2/
drwxr-xr-x root/root         0 2024-02-25 15:04 dir3/
drwxr-xr-x root/root         0 2024-02-25 15:04 dir4/
drwxr-xr-x root/root         0 2024-02-25 15:04 dir5/
-rw-r--r-- root/root         0 2024-02-25 15:04 file1
-rw-r--r-- root/root 104857600 2024-02-25 15:34 file100.txt
-rw-r--r-- root/root         0 2024-02-25 15:04 file2
-rw-r--r-- root/root         0 2024-02-25 15:04 file3
-rw-r--r-- root/root         0 2024-02-25 15:04 file4
-rw-r--r-- root/root         0 2024-02-25 15:04 file5
-rw-r--r-- root/root      2104 2024-02-25 14:44 passwd
---------- root/root      1131 2024-02-25 14:45 shadow
-rw-r--r-- root/root         0 2024-02-25 15:39 file6
[root@localhost korea]# 

=======================================
[링크 파일] 
>>링크파일 사용 이유 : 사용/관리의 편의성

1) 하드 링크(원본파일에 링크거는것과 같음)
> #ln [원본파일] [링크 파일]
> 링크 수 증가
> 원본 파일 삭제 시, 복사본 파일은 정상적으로 사용 가능.
> 원본파일과 복사본파일 i-node번호가 같다.
> 허가권 변동 없음(-rw-r--r--)
> 파일만 링크 가능

2) 심볼릭 링크(윈도우의 바로가기)-보안상 취약
> #ln -s[원본파일] [링크 파일]
> 링크 수가 증가하지 않음
> 원본 파일 삭제 시, 복사본 사용할 수 없음
> 원본파일과 복사본파일 i-node번호가 다름
> 허가권이 바뀜(full 허가권이 나옴)-보안상 취약
>>풀허가권 lrwxrwxrwx. //모든 사용자가 읽고 쓰고 가능 (보안매우취약)
> 파일과 디렉터리 모두 링크 가능

//심볼릭 링크 만들어보기
//링크수 증가하지 않음
//원본인 fil1을 표시함
[root@localhost korea]# ln -s fil1 file2
[root@localhost korea]# ll
합계 4
-rw-r--r--. 1 root root 10  2월 25 16:18 file1
lrwxrwxrwx. 1 root root  4  2월 25 16:18 file2 -> fil1
//i-node번호 다름
[root@localhost korea]# ls -li
합계 4
907074 -rw-r--r--. 1 root root 10  2월 25 16:18 file1
907075 lrwxrwxrwx. 1 root root  4  2월 25 16:18 file2 -> fil1
//원본파일이 삭제되면 복사본으로 사용 불가
[root@localhost korea]# rm -rf file1
[root@localhost korea]# ll
합계 0
lrwxrwxrwx. 1 root root 4  2월 25 16:18 file2 -> fil1
[root@localhost korea]# cat file1
cat: file1: 그런 파일이나 디렉터리가 없습니다
//허가권이 다르다
[root@localhost korea]# ln -s file1 file2
[root@localhost korea]# ll
합계 4
-rw-r--r--. 1 root root 11  2월 25 16:21 file1
lrwxrwxrwx. 1 root root  5  2월 25 16:22 file2 -> file1
//파일 내용은 잘 공유 됨
[root@localhost korea]# vi file2
[root@localhost korea]# cat file1
linux
unix
windows
[root@localhost korea]# vi file1
[root@localhost korea]# cat file2
linux
unix
windows
korea

//심볼릭 링크 :  타 디렉터리에 있는 파일에 심볼릭 링크 달기
[root@localhost home]# vi file1
[root@localhost home]# cd korea
[root@localhost korea]# ll
합계 8
-rw-r--r--. 2 root root 25  2월 25 16:23 file1
-rw-r--r--. 2 root root 25  2월 25 16:23 filehard
lrwxrwxrwx. 1 root root  5  2월 25 16:26 filesymbol -> file1
[root@localhost korea]# ln -s /home/file1 file7
[root@localhost korea]# 
[root@localhost korea]# 
[root@localhost korea]# ll
합계 8
-rw-r--r--. 2 root root 25  2월 25 16:23 file1
lrwxrwxrwx. 1 root root 11  2월 25 16:27 file7 -> /home/file1
-rw-r--r--. 2 root root 25  2월 25 16:23 filehard
lrwxrwxrwx. 1 root root  5  2월 25 16:26 filesymbol -> file1
[root@localhost korea]# vi file7
[root@localhost korea]# cd ..
[root@localhost home]# cat file1
linux
unix

//제목이 보기 어려운경우 링크를 걸어주면 편리하게 관리 가능
[root@localhost korea]# touch dflsk;fk;slkflsd
bash: fk: command not found...
Similar command is: 'fc'
bash: slkflsd: command not found...
[root@localhost korea]# ll
합계 12
-rw-r--r--. 1 root root  0  2월 25 16:32 dflsk
-rw-r--r--. 2 root root 25  2월 25 16:23 file1
lrwxrwxrwx. 1 root root 11  2월 25 16:27 file7 -> /home/file1
-rw-r--r--. 2 root root 24  2월 25 16:30 file8
-rw-r--r--. 2 root root 25  2월 25 16:23 filehard
lrwxrwxrwx. 1 root root  5  2월 25 16:26 filesymbol -> file1
[root@localhost korea]# touch jsklfjdlfj
[root@localhost korea]# ll
합계 12
-rw-r--r--. 1 root root  0  2월 25 16:32 dflsk
-rw-r--r--. 2 root root 25  2월 25 16:23 file1
lrwxrwxrwx. 1 root root 11  2월 25 16:27 file7 -> /home/file1
-rw-r--r--. 2 root root 24  2월 25 16:30 file8
-rw-r--r--. 2 root root 25  2월 25 16:23 filehard
lrwxrwxrwx. 1 root root  5  2월 25 16:26 filesymbol -> file1
-rw-r--r--. 1 root root  0  2월 25 16:32 jsklfjdlfj
[root@localhost korea]# ln -s jsklfjdlfj aaa
[root@localhost korea]# ll
합계 12
lrwxrwxrwx. 1 root root 10  2월 25 16:32 aaa -> jsklfjdlfj
-rw-r--r--. 1 root root  0  2월 25 16:32 dflsk
-rw-r--r--. 2 root root 25  2월 25 16:23 file1
lrwxrwxrwx. 1 root root 11  2월 25 16:27 file7 -> /home/file1
-rw-r--r--. 2 root root 24  2월 25 16:30 file8
-rw-r--r--. 2 root root 25  2월 25 16:23 filehard
lrwxrwxrwx. 1 root root  5  2월 25 16:26 filesymbol -> file1
-rw-r--r--. 1 root root  0  2월 25 16:32 jsklfjdlfj


//심볼릭 링크: 디렉터리에 심볼릭 링크 걸어
//원본 디렉터리에 새로운 파일이나 디렉터리를 만들면
//링크에서도 똑같이 확인 가능함을 확인하기
[root@localhost korea]# mkdir dir1
[root@localhost korea]# 
[root@localhost korea]# 
[root@localhost korea]# 
[root@localhost korea]# mkdir ckdjlkjfdgkld
[root@localhost korea]# ll
합계 12
lrwxrwxrwx. 1 root root 10  2월 25 16:32 aaa -> jsklfjdlfj
drwxr-xr-x. 2 root root  6  2월 25 16:34 ckdjlkjfdgkld
-rw-r--r--. 1 root root  0  2월 25 16:32 dflsk
drwxr-xr-x. 2 root root  6  2월 25 16:34 dir1
-rw-r--r--. 2 root root 25  2월 25 16:23 file1
lrwxrwxrwx. 1 root root 11  2월 25 16:27 file7 -> /home/file1
-rw-r--r--. 2 root root 24  2월 25 16:30 file8
-rw-r--r--. 2 root root 25  2월 25 16:23 filehard
lrwxrwxrwx. 1 root root  5  2월 25 16:26 filesymbol -> file1
-rw-r--r--. 1 root root  0  2월 25 16:32 jsklfjdlfj
[root@localhost korea]# ln -s ckdjlkjfdgkld/ dir2
[root@localhost korea]# ll
합계 12
lrwxrwxrwx. 1 root root 10  2월 25 16:32 aaa -> jsklfjdlfj
drwxr-xr-x. 2 root root  6  2월 25 16:34 ckdjlkjfdgkld
-rw-r--r--. 1 root root  0  2월 25 16:32 dflsk
drwxr-xr-x. 2 root root  6  2월 25 16:34 dir1
lrwxrwxrwx. 1 root root 14  2월 25 16:34 dir2 -> ckdjlkjfdgkld/
-rw-r--r--. 2 root root 25  2월 25 16:23 file1
lrwxrwxrwx. 1 root root 11  2월 25 16:27 file7 -> /home/file1
-rw-r--r--. 2 root root 24  2월 25 16:30 file8
-rw-r--r--. 2 root root 25  2월 25 16:23 filehard
lrwxrwxrwx. 1 root root  5  2월 25 16:26 filesymbol -> file1
-rw-r--r--. 1 root root  0  2월 25 16:32 jsklfjdlfj
[root@localhost korea]# cd dir2
[root@localhost dir2]# touch linux.text
[root@localhost dir2]# 
[root@localhost dir2]# 
[root@localhost dir2]# 
[root@localhost dir2]# cd ..
[root@localhost korea]# ll
합계 12
lrwxrwxrwx. 1 root root 10  2월 25 16:32 aaa -> jsklfjdlfj
drwxr-xr-x. 2 root root 24  2월 25 16:34 ckdjlkjfdgkld
-rw-r--r--. 1 root root  0  2월 25 16:32 dflsk
drwxr-xr-x. 2 root root  6  2월 25 16:34 dir1
lrwxrwxrwx. 1 root root 14  2월 25 16:34 dir2 -> ckdjlkjfdgkld/
-rw-r--r--. 2 root root 25  2월 25 16:23 file1
lrwxrwxrwx. 1 root root 11  2월 25 16:27 file7 -> /home/file1
-rw-r--r--. 2 root root 24  2월 25 16:30 file8
-rw-r--r--. 2 root root 25  2월 25 16:23 filehard
lrwxrwxrwx. 1 root root  5  2월 25 16:26 filesymbol -> file1
-rw-r--r--. 1 root root  0  2월 25 16:32 jsklfjdlfj
[root@localhost korea]# cd ckdjlkjfdgkld/
[root@localhost ckdjlkjfdgkld]# ll
합계 0
-rw-r--r--. 1 root root 0  2월 25 16:34 linux.text
[root@localhost ckdjlkjfdgkld]# ll
합계 0
-rw-r--r--. 1 root root 0  2월 25 16:34 linux.text
[root@localhost ckdjlkjfdgkld]# mkdir dir7
[root@localhost ckdjlkjfdgkld]# cd ..
[root@localhost korea]# cd dir2
[root@localhost dir2]# ll
합계 0
drwxr-xr-x. 2 root root 6  2월 25 16:36 dir7
-rw-r--r--. 1 root root 0  2월 25 16:34 linux.text

*고유식별번호 i-node
[root@localhost korea]# ls -il
합계 8
907074 -rw-r--r--. 2 root root 19  2월 25 16:11 file1
907074 -rw-r--r--. 2 root root 19  2월 25 16:11 file2
//<- 907074 가 i-node

==================================================
[셸 (Shell)]
> 기본 셸 : bash
> bash셸의 환경 설정 파일 : /etc/bashrc   
> bashrc <--내부/외부명령어 모두를 아우르는 환경설정파일임

<alias>
#alias [명령어]=['실제 실행 명령어']
#alias 1='ls -l'
#1 //ls -l 실행 됨
하지만 로그아웃하면 1 실행 안됨 (~에서)
#alias 100='ls -l' <--실습해보기

<bashrc 환경설정파일> <-여기서 바꿔주면, alias에도  바꿔져있음
==>자주 쓰는건 /etc/bashrc 에 추가해서 사용하자
//etc로 가서, vi로 bashrc 설정파일 열어서 편집해주기
//로그아웃하고 다시 들어와서 적용됐는지 확인하기
//alias 내부에도 같이 바뀌게 됨

//bashrc 환경설정 바꾸는것
//996  cd /etc
  997  vi bashrc
  998  exit
  999  cd /etc
 1000  100

<프롬프트 환경 설정> <-bashrc 파일에 43번줄
u : 사용자명
h : 호스트명
W : 디렉터리명 (최종) 
w : 디렉터리명 (절대경로)


43 [ "$PS1" = "\\s-\\v\\\$ " ] && PS1="[\u@\h \W]\\$ "
디폴트
 43     [ "$PS1" = "\\s-\\v\\\$ " ] && PS1="[\u@\h \W]\\$ "
[root@localhost ~]# cd /home/korea
[root@localhost korea]# 
 43     [ "$PS1" = "\\s-\\v\\\$ " ] && PS1="[\u@\h \w]\\$ "
[root@localhost ~]# cd /home/korea
[root@localhost /home/korea]#
 43     [ "$PS1" = "\\s-\\v\\\$ " ] && PS1="[\d][\u@\h \w]\\$ "
[일  2월 25][root@localhost ~]# 
 43     [ "$PS1" = "\\s-\\v\\\$ " ] && PS1="[\d][\t][\u@\h \w]\\$ "
[일  2월 25][17:32:48][root@localhost ~]# 
 43     [ "$PS1" = "\\s-\\v\\\$ " ] && PS1="[\d][\T][\u@\h \w]\\$ "
[일  2월 25][05:35:16][root@localhost ~]# 
[ "$PS1" = "\\s-\\v\\\$ " ] && PS1="\e[34m[\d][\T][\u@\h \w]\\$\e[0m"
프롬프터 폰트 색깔 blue로 바뀜




// alias - 내부명령어중 하나
[root@localhost korea]# alias
alias cp='cp -i'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias l.='ls -d .* --color=auto'
alias ll='ls -l --color=auto'
alias ls='ls --color=auto'
alias mv='mv -i'
alias rm='rm -i'
alias xzegrep='xzegrep --color=auto'
alias xzfgrep='xzfgrep --color=auto'
alias xzgrep='xzgrep --color=auto'
alias zegrep='zegrep --color=auto'
alias zfgrep='zfgrep --color=auto'
alias zgrep='zgrep --color=auto'

// compgen -b (내부명령어가 뭐가 있는지 보는거)
[root@localhost korea]# compgen -b|column
.		dirs		kill		source
:		disown		let		suspend
[		echo		local		test
alias		enable		logout		times
bg		eval		mapfile		trap
bind		exec		popd		true
break		exit		printf		type
builtin		export		pushd		typeset
caller		false		pwd		ulimit
cd		fc		read		umask
command		fg		readarray	unalias
compgen		getopts		readonly	unset
complete	hash		return		wait
compopt		help		set
continue	history		shift
declare		jobs		shopt


//내부명령어 예시
[root@localhost korea]# printf "%x\n" 10
a

======================================================
[파일/디렉터리 검색]
#find [경로][옵션]....[설정 값].......
#find /etc  (/ 슬래쉬를 쓰면 최상위로부터 경로 시작)
#find / -name passwd (경로 / 옵션 -name

<옵션>
-name : 파일/디렉터리명으로 검색
-type : 파일 유형 지정(d:디렉터리, f:파일)
-size : 파일 크기 지정
-maxdepth : 디렉터리 검색 깊이
-exec : 다른 프로그램 실행

-atime : 접근 시간(곱하기 24시간) 1 <- 1일 ///시간 아님!!!
-mtime : 수정 시간
-cmtime : 모드 수정 시간 (모드:허가권 같은거)

//==>시간 기준(컴퓨터는 
//현재 2/25 19:11이라면
// -1 == 2/25 19:10 ~ 2/24 19:10 동안의 1일치동안 변경된것들
 // +1 == 2/24 19:10 이전동안 변경된 것들


//파일만 찾기
[root@localhost home]# find / -name passwd -type f
find: ‘/proc/6841/task/6841/net’: 부적절한 인수
find: ‘/proc/6841/net’: 부적절한 인수
/sys/fs/selinux/class/passwd/perms/passwd
/etc/pam.d/passwd
/etc/passwd
/usr/bin/passwd
/usr/share/bash-completion/completions/passwd


//d 들어간 디렉터리 찾기
[root@localhost home]# find /home/korea -name 'd*' -type d
/home/korea/d1
/home/korea/d2
/home/korea/d3
/home/korea/d4
/home/korea/d5
[root@localhost home]# 


//file
[root@localhost korea]# find /home/korea -name 'fi*' -type f
/home/korea/file1
/home/korea/file2
/home/korea/file3
/home/korea/file4
/home/korea/file5

//사이즈
[root@localhost ~]# find /home/korea -type f  -size -1k 
/home/korea/f1
/home/korea/f2
/home/korea/f3
/home/korea/f4
/home/korea/f5
/home/korea/file1
/home/korea/file2
/home/korea/file3
/home/korea/file4
/home/korea/file5


//파일크기 이렇게 지정했을 때
-rw-r--r--. 1 root root 500K  2월 25 18:20 file100
-rw-r--r--. 1 root root    0  2월 25 18:14 file2
-rw-r--r--. 1 root root 1.0M  2월 25 18:20 file200
-rw-r--r--. 1 root root    0  2월 25 18:14 file3
-rw-r--r--. 1 root root 100M  2월 25 18:20 file300
-rw-r--r--. 1 root root    0  2월 25 18:14 file4
-rw-r--r--. 1 root root 1.0G  2월 25 18:20 file400
-rw-r--r--. 1 root root    0  2월 25 18:14 file5
-rw-r--r--. 1 root root 2.0G  2월 25 18:21 file500
//**사이즈 보이게 보이게 하려면 ls-lh
//사이즈 최소 최대 주기
[root@localhost ~]# find /home/korea -type f  -size +1M -size -10G
/home/korea/file300
/home/korea/file400
/home/korea/file500


//file1이 있는 디렉처리는 모두 출력
[root@localhost ~]# find /home -type f  -name file1
/home/korea/dir1/file1
/home/korea/dir1/dir2/file1
/home/korea/file1
// -maxdepth 디렉터리 깊은곳까지 찾기
//-maxdepth 2 디렉터리 2까지
[root@localhost ~]# find /home -maxdepth 2 -type f  -name file1
/home/korea/file1
//-maxdepth 4 디렉터리 4까지
[root@localhost ~]# find /home -maxdepth 4 -type f  -name file1
/home/korea/dir1/file1
/home/korea/dir1/dir2/file1
/home/korea/file1

//-exec 실습
//1. /home/korea 경로의 file2 삭제하기
//rm -rf{} <-중괄호 안에 file2를 넣어주는 변수
[root@localhost ~]# find /home/korea -name file2 -exec rm -rf {} \;
//2. 이름이 file2인것 다 지우기
[root@localhost ~]# find /  -name file2 -exec rm -rf {} \;
//3. file1인 이름의 파일명 다 지우기
[root@localhost ~]# find /  -name file1 -exec rm -rf {} \;
//4. 이름이 file1은 다 지우기
[root@localhost ~]# find /  -name 'file1*' -exec rm -rf {} \;
//5. 이름이 file3인것 내용 다 출력 ls -l
[root@localhost ~]# find /  -name 'file3' -exec ls -l {} \;
-rw-r--r--. 1 root root 0  2월 25 18:14 /home/korea/file3


//오류 이렇게 날 때 해결법
//find만 쓰면
//find: ‘/proc/6841/task/6841/net’: 부적절한 인수
find: ‘/proc/6841/net’: 부적절한 인수
//이게 자꾸 따라다님

[root@localhost ~]# find /  -name file3 -exec ls -l {} \;
find: ‘/proc/6841/task/6841/net’: 부적절한 인수
find: ‘/proc/6841/net’: 부적절한 인수
-rw-r--r--. 1 root root 0  2월 25 18:43 /home/korea/dir1/dir2/file3
-rw-r--r--. 1 root root 0  2월 25 18:14 /home/korea/file3

[root@localhost ~]# find /  -name file3 -exec ls -l {} \; 2> /dev/null
-rw-r--r--. 1 root root 0  2월 25 18:43 /home/korea/dir1/dir2/file3
-rw-r--r--. 1 root root 0  2월 25 18:14 /home/korea/file3
//이렇게 사라진다.//저걸 dev 쓰레기통에 버리는 것





root@localhost korea]# touch file1
[root@localhost korea]# ll
합계 0
-rw-r--r--. 1 root root 0  2월 25 19:16 file1
[root@localhost korea]# vi file1 
[root@localhost korea]# ll
합계 4
-rw-r--r--. 1 root root 65  2월 25 19:17 file1
[root@localhost korea]# chmod 777 file1
[root@localhost korea]# ll
합계 4
-rwxrwxrwx. 1 root root 65  2월 25 19:17 file1
[root@localhost korea]# ll

//명령어를 제대로 주지않은 파일을 실행하면 이렇게 안뜬다.
[root@localhost korea]# ./file1
./file1: 줄 1: adjlfskjdslfajdlk: 명령어를 찾을 수 없음
./file1: 줄 2: kdfjldkjfls: 명령어를 찾을 수 없음
./file1: 줄 3: dsfjklfjasdf: 명령어를 찾을 수 없음
./file1: 줄 4: dkkjfldasfjk: 명령어를 찾을 수 없음
./file1: 줄 5: dkjflasf: 명령어를 찾을 수 없음

//명령어 제대로 준 file2 생성해보기
//# chmod 777 file2 <- 명령어 파일 만드는 권한모드!!!!!!
[root@localhost korea]# touch file2
[root@localhost korea]# vi file2
[root@localhost korea]# chmod 777 file2
[root@localhost korea]# ll
합계 8
-rwxrwxrwx. 1 root root 65  2월 25 19:17 file1
-rwxrwxrwx. 1 root root 21  2월 25 19:19 file2
[root@localhost korea]# ./file2
[root@localhost korea]#  cd korea
bash: cd: korea: 그런 파일이나 디렉터리가 없습니다
[root@localhost korea]# vi file2
[root@localhost korea]# ./file2
[root@localhost korea]# ll
합계 12
-rwxrwxrwx. 1 root root   65  2월 25 19:17 file1
-rw-r--r--. 1 root root    0  2월 25 19:21 file100
-rwxrwxrwx. 1 root root   53  2월 25 19:21 file2
-rw-r--r--. 1 root root 2104  2월 25 19:21 passwd

//vi 예시 - 이런거 만들어두면 편함
 1 cp /etc/passwd /home/korea
  2 touch /home/korea/file100
  3 mv /home/korea/file100 /home/korea/dir1
  4 mkdir /home/korea/dir100
  5 touch /home/korea/file200
  6 cp /home/korea/file200 /home/korea/dir100
  7 tar -cvf /home/test.tar /home/* <-- 요게 안된다.


// file3파일로  만들었다면
// ./file3  <-file3 실행 명령어를 누르면
//파일 내에 써둔 명령어대로 작동한걸 볼 수 있음
//다만, output같은 화면에 출력되는 명령어는 안됨













<<<<<<<<<<<<<<<<참고>>>>>>>>>>>>>>>>>>>>
//cat으로 file1 내용 작성하기(vi없이)
[root@localhost korea]# cat > file1
linux
unix
windows
//작성완료 후
>>ctrl + d


//리다이렉션 
// cat > file7  //원본 파일에 덮어씌우기
// cat>> file 7 //원본파일에 내용 추가

//**사이즈 보이게 보이게 출력 하려면 ls-lh






























