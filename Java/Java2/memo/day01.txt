day01. 환경 구축, JAVA1 복습, 상속

작업 환경 구축

	1. C 드라이브 또는 D 드라이브에 
	0930_JAVA2_sms으로 폴더 만들기
	2. 내부에 폴더 3개 만들기
	(memo, resource, workspace)
	3. memo 폴더→ 수업중에 작성한 메모장 파일
	4. resource 폴더 → 수업에 필요한 자료 등
	5. workspace 폴더 → 소스코드 저장

OT
	
	강사: 서민성 강사
	수업 시수: 4시간 * 8일 = 32시간
	(01-13, 01-14, 01-20, 01-21, 01-27, 01-28		02-03, 02-04)
	수업 자료: 오픈 카카오 채팅방(자료 및 줌 링크)
	수업 방식: 이론 설명 → 메모장 → 예제 
	→ 실습 (50분 수업 10분 휴식)
	이메일:yup1yup1201@gmail.com
	제목: 0930 자바2 홍길동(본인이름)
	내용: 소스코드(본인이 작성한 코드 복사), 
	에러메세지(에러 발생시 에러창 복사)
	기록 : 수업 영상은 녹화일로부터 30일 지나면 자동삭제
	자리: 대면 자리는 고정! 
	단 비대면으로 참석하실경우 다른분이 사용하실 수 있음(참고)

필드의 초기화

	1. 명시적 초기화(int age = 10;)
		int age = 10;

	2. 생성자를 이용한 초기화(this.age = age;)
		ClassA(int age){
			this.age = age;
		}

	3. 초기화 블록을 이용한 초기화
	-> 복잡한 초기화 사용시(조건문, 반복문, 예외처리 등..)

		int age;

		{
			* 인스턴스 초기화 블록
			age = 20;

		}

	
		static int age;

		static {
			* 스태틱 초기화 블록
			age = 30;
		}

	* 인스턴스 초기화 블록
		객체화 될때마다 실행된다(객체가 생성될때마다)
		생성자보다 먼저 실행된다

	* 스태틱 초기화 블록
		클래스가 처음으로 메모리에 로딩될때 단 한번만 실행된다
		스태틱 필드의 복잡한 초기화를 위해 사용한다

	* 인스턴스 필드 : 기본값 -> 명시적 초기화 -> 인스턴스 초기화블록
	  -> 생성자

	  스태틱 필드 : 기본값 -> 명시적 초기화 -> 스태틱 초기화블록
	
	* 여러번 초기화하면 제일 마지막으로 초기화 한 값이 저장된다


상속(inheritance)
	
	기존 클래스의 멤버와 타입을 상속받는것

상속의 사용목적
	
	1. 기존 클래스의 멤버를 새로운 클래스에서 사용하고자 할때(재사용)
	2. 여러 클래스 선언시 멤버가 겹치는 경우, 부모 클래스를 먼저 선언하고
	공통멤버를 붂어서 자식 클래스들에게 상속해준다(그룹화)

	- 공통 멤버를 가지는 클래스 간의 공통점이 있는가?
	- is a 관계가 성립하는가?
		산악 자전거는 자전거이다
		2인용 자전거는 자전거이다

상속 문법
	
	class ClassA {
		A 멤버
	}	

	* ClassA를 상속받는 ClassB이다
	class ClassB extends ClassA{
		B 멤버
		* A 멤버를 사용할수 있다
	}

	ClassA : 부모 클래스, 상위 클래스(super class)
	ClassB : 자식 클래스, 하위 클래스(sub class)


super()
	부모 생성자

	생성자는 자식 클래스에게 상속되지 않지만, 자식 클래스에서
	부모 클래스의 생성자를 호출할수 있다

	자식 객체가 생성될때, 자식 클래스의 생성자는 부모 클래스의
	생성자를 super()로 먼저 호출하며, 이를 통해 부모 객체가 생성되고,
	부모 객체를 감싸고 자식 객체가 생성된다

	만약 직접 super()를 통해 부모 클래스의 생성자를 호출하지 않아도,
	컴파일러가 자동으로 작성해준다

	* super() 키워드는 코드 최상단에 작성해야한다

super
	부모의 주소값(참조값)이 저장되어 있는 변수
	자식 객체에서 부모 객체로 접근할때 super 키워드를 사용한다

메소드 오버라이딩
	
	부모 클래스에서 선언한 메소드를 자식 클래스에서 수정하고자 할때
	부모클래스와 동일한 이름으로 선언, 즉 재정의하는것

	* 메소드 오버로딩 : 중복된 메소드 이름으로 새로운 메소드를 정의하는것
	* 메소드 오버라이딩 : 상속받은 기존의 메소드를 재정의하는것

	1. 부모 클래스의 메소드명, 리턴타입, 매개변수가 동일해야 한다
	-> 선언부가 동일해야 한다













