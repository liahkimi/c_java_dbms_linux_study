day08. 쓰레드 동기화, 파일 입출력

쓰레드(thread)
	
	프로세스에서 작업을 처리하는 일꾼
	하나의 프로세스 내에서 실행되는 작업 단위
	프로세스 처리 경로

	* 싱글과 멀티쓰레드로 나누어진다

멀티 쓰레드 구현방법

	1. Thread 클래스 상속 및 Runnable 인터
	페이스 구현을 통해 run() 메소드 재정의
	
	* run() 구현부에 멀티쓰레드로 처리하고 
	싶은 코드를 작성한다

	2. 쓰레드 객체 생성(NEW)
	3. 쓰레드 객체에서 start() 메소드 호출
	(RUNNABLE)
	* JVM에게 멀티 쓰레드 처리를 요청

	4. 쓰레드 실행(RUNNABLE)

	5. 쓰레드 종료(TERMINATED)

동기화

	자원 공유 문제 : 하나의 자원을
	여러개의 쓰레드가 공유하면서 발생하는 문제

	하나의 쓰레드가 자원에 접근했을때
	다른 쓰레드가 자원에 접근하지 못하도록 막는것

	1. 블록 동기화
		synchronized(객체명) {...}
		일부 소스코드만 동기화를 걸어준다
		객체명에는 공유 객체명을 작성한다

	2. 메소드 동기화
		synchronized 메소드명() {...}
		메소드 선언부에 작성한다
		메소드 전체에 동기화를 걸어준다

쓰레드 제어 메소드

	1. sleep()
		지정된 시간동안 쓰레드를 대기시킨다
		
		* 쓰레드의 상태를 TIME_WAITING으로 
		전환시킨다

	2. join()
		현재 쓰레드의 작업을 멈추고, join()
		메소드를 사용한 쓰레드를 기다린다

	3. wait()
		동기화 영역에서 사용 가능하다
		대기 상태로 기다린다

		* 쓰레드의 상태를 WAITING으로 
		전환시킨다

	4. notify()
		동기화 영역에서 사용 가능하다
		대기중인 쓰레드 중 하나를 깨워준다
		
		* 쓰레드의 상태를 RUNNABLE으로 
		전환시킨다

	5. interrupt()
		대기 상태에 있는 쓰레드들의 실행을
		멈춘다(InterruptedException 발생)

멀티 쓰레드의 단점

	교착상태(DeadLock)
	멀티 쓰레드 중 쓰레드 간에 대기상태가 종료되지 않아,
	무한정 대기만 하는 비정상적인 상태

	-> 전체 쓰레드를 깨워주거나, 하나의 쓰레드를 종료시켜주면
	교착 상태가 해결된다

Thread 종료 방법

	원래 쓰레드는 처리해야 하는 작업을 모두 처리하면 자동 종료된다
	멀티 쓰레드는 모든 쓰레드의 실행이 끝나면 종료된다

	1. 실행 대기 상태인 쓰레드의 경우
		sleep(), wait(), join()등의 메소드를 사용해
		예외처리 존재하는 경우 

		interrupt() 메소드를 통해 예외처리의 catch문으로
		이동한후에(InterruptedException 발생) 쓰레드 
		종료 코드를 작성한다

	2. 실행 대기 상태가 아닌 쓰레드의 경우
		예외처리가 존재하지 않는 경우

		interrupted() 메소드를 통해 inputerrupt()
		메소드 실행 여부를 판단하고, 쓰레드 종료 코드를
		작성한다

	3. 프로그램 종료
		System.exit(0);
		-> 전체 쓰레드 종료(프로그램 종료)

파일 입출력(I/O)
	
	자바 프로그램(기준) 		외부파일
			<--- 읽기 ---     데이터
	     데이터	--- 쓰기 --->    
	
	입력(읽기) : 자바 프로그램 <- 외부파일 (Input)
	출력(쓰기) : 자바 프로그램 -> 외부파일 (Output)

스트림(stream)
	
	데이터를 주고받는 통로
	스트림은 단방향 이기 때문에 입출력 중에 하나만 가능하며,
	입력할때는 입력 스트림, 출력할때는 출력 스트림을 사용한다

	1. 기본스트림(실제 데이터를 주고받는 스트림) : 단독사용 가능
	2. 보조스트림(기본 스트림을 보조하는 스트림) : 단독사용 불가

기본스트림
	
	실제 데이터를 주고받는 스트림

	1. 바이트 기반 스트림
		입출력의 단위가 1byte
		모든 타입의 데이터 사용
		* 입력 스트림(InputStream)
			000InputStream -> 000 : 소통대상

			ex) AudioInputStream, FileInputStream...

		* 출력 스트림(OutputStream)
			000OutputStream -> 000 : 소통대상

			ex) AudioOutputStream, FileOutputStream...

	2. 문자 기반 스트림
		입출력의 단위가 2byte
		문자 데이터만 사용
		* 입력 스트림(Reader)
			000Reader 
		
			ex) FileReader, URLReader...

		* 출력 스트림(Writer)
			000Writer

			ex) FileWriter, URLWriter...


보조스트림

	기본스트림을 보조하여 기능을 향상시키거나,
	새로운 기능을 추가한다

	독립적으로 입출력을 할수 없다

	1. 바이트 기반 스트림(InputStream, OutputStream)
		입력 스트림
			ex) BufferedInputStream
		출력 스트림
			ex) BufferedOutputStream

	2. 문자 기반 스트림(Reader, Writer)
		입력 스트림
			ex) BufferedReader
		출력 스트림
			ex) BufferedWriter

보조 스트림 사용방법
	
	보조 스트림 객체명 = new 보조 스트림(기본 스트림);
	
	1. 기본 스트림 객체 생성
	2. 보조 스트림 생성자의 매개변수로 기본 스트림을 전달하여
	보조 스트림 객체 생성
	3. 보조 스트림 객체의 메소드 사용

버퍼(buffer)

	데이터 전송할때 데이터를 임시로 저장하는 공간(임시 저장공간)

File 클래스
	
	파일을 자바의 객체로 다룰 수 있게 해주는 클래스
	파일의 이름(확장자 포함)과 파일의 경로가 필요하다

	* 파일의 존재 유무 검사, 파일 생성, 파일 삭제,
	경로 확인 등...
	
절대경로와 상대경로

	절대 경로 : 기존 경로가 어디든지 상관없이 찾아갈수 있는 경로
	* 일반적으로 드라이브부터 시작한다

	상대 경로 : 기존 경로가 어디냐에 따라 달라지는 경로

	..(이전경로) .(현재경로) / (~안에)

직렬화와 역직렬화(p535)

	직렬화 : 자바의 객체나 데이터를 외부에서 사용할수 있도록
	바이트 단위로 변환하는것

	역직렬화 : 외부의 바이트 단위의 데이터를 자바의 객체나
	데이터로 변환하는것

표준 입출력
	
	입출력 대상을 지정하지 않았을 경우
	표준 입력 : 키보드
	표준 출력 : 모니터
	
	System.in : 키보드와 연결된 표준 입력 스트림
	System.out : 모니터(콘솔)과 연결된 표준 출력 스트림


* 자바 수업을 잘 이해했다면
	1. 내부클래스
	2. 익명클래스
	3. 익명클래스 객체화
	4. 람다식
	5. 함수형 인터페이스
	6. stream API


JAVA2 복습
	
	1. 상속과 접근제한자
		상속 : 기존 클래스의 멤버와 타입을 상속받는다

		* 하나의 객체가 여러개의 타입을 가진다
		* 메소드 오버로딩, 메소드 오버라이딩의 차이
		* super, super()
		
		접근제한자 : 필드, 클래스, 메소드의 접근 권한을
		제어한다

		default, protected : 같은 패키지. protected
		는 다른 패키지의 자식클래스에서 상속을 받으면 사용가능
		public : 모든곳에서
		private : 같은 클래스. 다른 클래스에서 사용시에는
		게터와 세터(getter, setter)를 통해서 사용한다

		* 데이터를 직접 접근하지 않고, 데이터를 접근할수 있는
		메소드를 통해서 접근하자! (캡슐화, 정보은닉)

	2. 다형성과 타입 변환

		상속을 배우면, 하나의 객체가 여러가지 클래스 타입을
		가진다는것을 알게된다

		* 객체 타입 비교 : instanceof(a instanceof A)
		
		객체를 형변환 -> 해당 객체가 가지고 있는 다른 타입으로
		형변환한다

		* up casting : (자료형)값으로 직접 작성하지 않아도
		자동 형변환한다
			상위타입 객체명 = new 하위타입();
			-> 하위타입 객체를 상위타입 변수에 넣어 자동형변환

		* down casting : (자료형)값으로 직접 작성하여 형변환

			하위타입 객체명 = 
			(하위타입)up casting된 하위타입 객체;

			((하위타입)up casting된 하위타입 객체).필드명;

			-> up casting된 하위타입 객체를 다시 
			하위타입으로 형변환

	3. 추상 클래스와 인터페이스

		추상 클래스 
			추상 메소드를 1개이상 가지고 있는 클래스

		인터페이스
			공통된 값과 기능을 제공하는 틀

		추상클래스 -> 상속 -> 클래스
		인터페이스 -> 구현 -> 클래스

		인터페이스 -> 상속 -> 인터페이스
		
		* 다중구현 : 여러개의 인터페이스를 하나의 클래스에서 구현
		  단일상속 : 하나의 클래스를 하나의 클래스에서 상속
		-> 모호성때문에 자바는 단일 상속만 가능하다

	4. API
		Application Programming Interface
			다른 개발자가 만든 코드의 집합

		* 내부 API : JRE 라이브러리에 포함된 여러개의 클래스와
		인터페이스

		* 외부 API : 다른 개발자가 만들 클래스와 인터페이스
		(.jar파일로 추가해서 사용, 웹을 통해 요청하여 사용)

	5. 예외처리
		예외가 발생하면 원래 프로그램은 비정상적인 종료가 된다
		-> 프로그램의 비정상적인 종료를 예외처리를 통해 막는다

		* throw : 예외를 강제로 발생시키기
		* throws : 예외 처리 의무를 던지기

	6. 컬렉션 프레임워크
		자료구조를 구현해놓은 여러개의 클래스와 인터페이스
		
		ArrayList(List) : 순서가 존재, 중복된 값을 허용
			* 배열과 달리 길이를 동적으로 사용 가능
		HashSet(Set) : 순서가 존재 X, 중복된 값을 허용 X
		HashMap(Map) : 순서가 존재 X, 중복된 값을 허용(value)
			* key-value 한쌍으로 데이터를 관리한다

		* Iterator : 여러개의 컬렉션 객체를 동일한 방식으로
		데이터를 가져오기 위해 공통적으로 사용하는 타입

	7. 쓰레드
		프로그램 : 실행이 되지 않은 코드의 묶음
		프로세스 : OS(운영체제)로부터 시스템자원을 할당받아
		실행이 된 프로그램
		쓰레드 : 프로세스에서 작업을 처리하는 일꾼(단위)

		* 싱글쓰레드 : 여러개의 작업을 하나의 일꾼(쓰레드)가 처리
		* 멀티쓰레드 : 여러개의 작업을 여러개의 일꾼(쓰레드)가 처리

		* 멀티쓰레드의 문제 : 자원 공유의 문제(동기화), 
		데드락(교착상태)

	8. 파일 입출력
		




















	









