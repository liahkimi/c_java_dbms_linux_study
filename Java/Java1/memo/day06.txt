day06. 배열, 빠른 for문, 중첩 for문, 이차원 배열, 메소드

Arrays 클래스
	배열에서 사용 가능한 여러개의 편리한 
	메소드(기능)를 제공한다

	1. 배열 출력
		Arrays.toString(배열명);
		-> 배열의 모든 요소를 한꺼번에 출력한다

	2. 오름차순 배열 정렬
		Arrays.sort(배열명);
		-> 작은것부터 큰것까지 정렬한다

	3. 내림차순 배열 정렬
		Arrays.sort(배열명, Comparator.reverseOrder());
		-> 큰것부터 작은것까지 정렬한다

	4. 배열 복사
		얕은 복사(Shallow copy)
			복사된 배열과 원본 배열이 변경될때
			함께 변경된다
 
		깉은 복사(Deep copy)
			값이 함께 변경되지 않는다

for-each문(빠른 for문, 확장 for문, 향상된 for문)

	for(자료형 변수명: 반복대상) {
		반복 실행할 코드
	}

	* 변수에는 반복 대상의 요소가 차례대로 담기며
	요소의 개수만큼 코드를 반복 실행한다

2차원 배열
	배열 안에 또다른 배열이 존재한다
	* 2차원 이상의 배열은 메모리 낭비가 심하므로 선호하지 않음

2차원 배열 선언 및 생성
	자료형[][] 배열명 = new 자료형[행의 칸수][열의 칸수];
 	* 행 : 가로줄 , 열 : 세로줄
	
	자료형[][] 배열명 = {{값1, 값2, 값}, {값1, 값2, 값}};
	
2차원 배열 길이
	arr.length; : 행의 길이
	arr[i].length; : 열의 길이

메소드(method)
	기능
	특정 기능을 수행하기 위한 코드들의 묶음

	* 이름 뒤에 소괄호가 온다
	키워드 (if, while, for..등)뒤의 소괄호는 메소드가 아니다

메소드의 사용 목적
	1. 소스코드의 간결화(코드의 가독성을 높이기 위해)
	2. 코드의 재사용(특정성을 부여하면 재사용하기 어렵다)
	3. 모듈화(모듈 = 부품) : 코드들의 집합을 따로 분리하는것

메소드 선언과 구현(메소드를 만드는것)
	
	리턴타입 메소드명(자료형 매개변수명...) 	-> 선언부(signature)
	{
		실행할 코드			-> 구현부(body)
		return 리턴값;
	}

	1. 메소드명 : 메소드의 기능을 동사 형태로 작성한다
	2. 리턴타입 : 만약 외부로 반환(리턴)하는 값이 있다면 
	그 값의 자료형을 작성한다
	만약 외부로 반환(리턴)하는 값이 없다면 void로 작성한다
	
	*실제 리턴타입보다 작은 자료형을 반환하면 해당 리턴타입
	으로 자동 형변환된다

	3. 자료형 매개변수 : 외부로부터 전달받은 값을
	메소드에게 전달해주는 매개체가 되는 변수(매개변수)

	매개변수가 있다면 자료형과 매개변수명을 순서에 맞게
	작성한다

	매개변수가 없다면 생략가능(매개변수가 없다면 외부에서
	값을 전달받을수 없다)

	4. 실행할 코드 : 메소드의 기능을 구현하는 코드를 작성한다

	5. retrun : 외부에 반환할 값이 있을때 return 리턴값; 으로
	작성한다. 만약 리턴값이 없다면 메소드 호출 코드를 값으로
	볼수 없다. 만약 리턴값이 있다면 메소드 호출 코드를 값으로
	본다.

	* 만약 return 키워드 옆에 아무런 값이 적혀 있지 않는데
	return 키워드가 존재한다면 해당 시점에서 메소드의 실행을
	종료하는 목적으로 해석할수 있다

메소드 호출
	
	참조변수(객체명).메소드명();

메소드의 선언과 호출

	선언(만드는것) : {} 중괄호가 있고, 반드시 다른 메소드 밖에서 선언
	호출(사용하는것) : {} 중괄호가 없고, 반드시 다른 메소드 안에서 사용

	* 메소드 선언
		void printHello(){
			System.out.println("hello");	
		}

	* 메소드 호출
		mt.printHello();

함수와 메소드
	
	함수 : 클래스 밖에 선언되는것
	메소드 : 클래스 내부에 선언되는것

	자바는 기본 구조상 반드시 클래스 안에 메소드가 존재해야 하므로
	함수라 부르지 않고 메소드라고 부른다
















	






	









