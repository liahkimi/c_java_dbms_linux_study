day05. while문, do-while문, 배열

복습
	if문
		if(조건식1) {
			조건식1이 참이면 실행할 코드
		}else if(조건식2){
			조건식1이 거짓이고,
			조건식2가 참이면 실행할 코드
		}else{
			조건식1과 조건식2가 거짓이면
			실행할 코드
		}

	switch문
		switch(변수){

		case 값1:
			변수의 값이 값1과 일치하면 실행할 코드
			break;
		case 값2:
			변수의 값이 값2와 일치하면 실행할 코드
			break;
		default:
			변수의 값이 값1, 값2와 일치하지 않으면
			실행할 코드
			break;
		}

	for문

		for(초기식; 조건식; 증감식) {
			조건식이 참이면 반복 실행할 코드		
		}
		
		초기식 : 반복문에 사용할 제어변수를 초기화
		조건식 : 반복 수행할 범위
		증감식 : 제어변수를 증가시키거나 감소시킨다
		-> 조건식이 거짓인 경우를 발생시킨다

		초기식 -> 조건식 -> 실행할 코드 -> 증감식
		-> 조건식 -> 실행할 코드 -> 증감식...

while문
	조건식이 참인동안 코드를 반복실행한다
	
	while(조건식) {
		실행할 코드
	}

	* 주의사항 : 코드 실행중에 조건식이 거짓이 될수 있어야
	무한반복(루프)에 빠지지 않는다

do-while문
	
	do {
		조건식이 참이면 반복 실행할 코드

	}while(조건식);

	* 최소 1번은 무조건 코드를 실행하고
	그 이후의 반복 여부는 조건식에 따라 판단한다
	-> 조건식의 참 거짓 여부와 상관없이 1회는 무조건 실행된다

기타 제어문

	1. break
		즉시 해당 중괄호 영역을 벗어난다
		for문, while문, do-while문에서 사용시
		반복이 종료된다

	2. continue
		즉시 다음 반복으로 넘어간다(건너띄기)
		-> continue 키워드 아래의 코드를 실행하지 않는다
		* for문에서 사용시 증감식으로 이동한다
		* while문에서 사용시 조건식으로 이동한다

제어문 정리

	코드의 실행을 제어한다
	1. 조건문
		- if문 : 조건식에 비교연산자를 사용하거나
		논리연산자를 사용할때 사용

		- switch문 : 하나의 변수의 값과 일치 여부를
		판별하여 코드를 실행할때 사용

		* 삼항연산자 : 조건식이 1개일때 주로 사용
	2. 반복문
		- for문 : 반복 횟수를 알때 사용

		- while문 : 반복 횟수를 모르고 특정 조건을
		만족할때까지 코드를 반복시킬때 사용

		- do-while문 : 최소 1번은 실행하고 조건에
		따라 코드를 반복시킬때 사용

	3. 기타제어문
		- break : 특정 조건을 만족하면 반복을 종료할때
		사용

		- continue : 특정 조건이면 다음 반복으로 넘어
		갈때 사용(특정 조건일때는 아래의 코드를 실행
		하지 않기 위해 사용)

		* break와 continue는 조건문 안에서 작성하지만
		해당 조건문은 반복문 안에 있어야 한다
		-> 반복문 밖에서 break, continue 사용 불가
	
배열(Array)
	저장공간의 나열

배열과 변수
	변수 :	[	]
	-> 하나의 타입으로 된 하나의 값만 저장할수 있는 저장공간

	배열 : 	[	][	][	]
	-> 하나의 타입으로 된 하나의 값만 저장할수 있는 
	저장공간의 나열
	-> 하나의 타입으로 된 여러개의 값을 저장할 수 있다

배열 사용목적
	1. 규칙이 없는 값에 규칙성을 부여하기 위해서
	2. 저장 공간 여러개를 이름 한개로 편리하게 관리하기 위해

배열의 선언
	
	자료형[] 배열명;
	자료형 배열명[];

	[] : 배열의 연산자
	
	ex) int[] ar;

배열의 생성과 선언
	1. new 자료형[배열의 칸수];
		자료형[] 배열명 = new 자료형[칸수];
		ex) int[] ar = new int[3];
		
		-> 어떤값을 넣을지는 모르나, 몇칸이 
		필요한지 알때 사용한다

		* new : 연산자. heap 메모리 영역에
		할당후 초기값으로 초기화하고 주소값을 반환한다

	2. new 자료형 {값1, 값2, 값3...};
		자료형[] 배열명 = {값1, 값2, 값3...};
		ex) int[] ar = {1,2,3};

		-> 어떤값을 넣을지 알때 사용한다
		* 배열을 선언하면서 생성할때는
		new 자료형을 생략할수 있다

	3. null
		자료형[] 배열명 = null;
		ex) int[] ar = null;

		* null : 주소값이 무엇인지 아직 모를때 사용한다
		-> 어떤값을 넣을지도 모르고, 몇칸 필요한지도
		모를때 사용한다

배열 정리
	ex) int[] ar = new int[2];

	stack 영역			heap 영역
	(이름이 존재한다)			(이름이 존재하지 않는다)

					   0번째      1번째	 -> 인덱스번호
	[0번째 저장공간의 주소값]		[      0	][     0	]
	               ar			 저장공간   저장공간


	1. stack 영역에 int[] 자료형의 변수 ar이 할당된다

	2. new 연산자를 통해 heap 영역에 int 자료형의 저장공간 2개가
	나열되어 할당된다

	3. 변수 ar에 heap 영역에 할당된 여러개의 저장공간 중 제일 앞에 있는
	0번째 저장공간의 주소값이 저장된다. 이때 변수 ar을 데이터를 직접
	가지는게 아닌 데이터가 위치한 주소값을 가지고 있기때문에 참조변수라고
	부른다

	4. 0번째 저장공간의 주소값을 알고 있기때문에 나열되어 있는 
	다른 저장공간에 접근할때는 배열명[인덱스번호]로 접근하여 사용한다

	* 일반변수 : 데이터를 직접 가지는 변수(기본 자료형)
	* 참조변수 : 데이터가 위치한 주소값을 가지는 변수. 해당 주소를 통해서
	데이터에 접근하여 값을 가져오거나 변경(String, 배열 등...)

배열의 구조
	1. 인덱스(index)
		배열에 존재하는 요소들에 순서대로 부여되는 위치번호
		0부터 시작하여 1씩 증가한다
		해당 인덱스의 요소를 접근할때는 배열명[인덱스번호]로 사용한다

	2. 배열의 길이
		배열을 생성할때 자동으로 생성되는 배열 저장공간의 수(칸수)
		변경할수 없다
		배열명.length; 로 사용한다
















	












