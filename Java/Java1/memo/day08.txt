day08. 클래스

복습
	클래스(class)
		객체를 생성하기 위한 틀(설계도)
		* 사용자 정의 타입
		* 연관성 있는 여러개의 자료형의 값과
		기능을 한곳에 담아 관리한다

	
	객체(object)
		현실 세계에 존재하는 모든것
		* 객체는 상태와 행동을 가진다

	객체화(instantiation)
		객체를 생성하는 작업
		-> 클래스대로 객체를 heap 메모리에 
		할당한다

		클래스명 객체명 = new 생성자;
		-> 클래스명 객체명 = new 클래스명();

		* 클래스의 객체를 heap 메모리에 할당하여
		해당 객체의 참조값을 객체명의 변수에 저장한다

	멤버의 사용
		객체명.필드명;
		객체명.메소드명();

		* . : 하위 연산자(~안에)

		Bike bike1 = new Bike();
		Bike bike2 = new Bike();
		
		System.out.println(bike1.color);
		System.out.println(bike2.color);

		bike1.color = "black";

		* 각각의 객체가 가지고 있는 필드는 독립적인
		값으로 사용할수 있다

	생성자(constructor)
		
		객체가 생성될때 필드를 초기화한다
		
		* 리턴타입이 void로 정해져있다
		* 생성자는 메소드명이 클래스명으로 정해져있다
		* new 연산자와 함께 호출한다

기본 생성자
	매개변수와 실행할 코드 없는 형태의 생성자
	모든 클래스는 하나 이상의 생성자가 선언되어 있어야 한다
	만약 직접 생성자를 선언하지 않으면 기본 형태의 생성자를
	자동으로 컴파일러가 선언해준다

this
	객체의 주소값이 this라는 변수에 자동으로 담기게된다
	일반적으로 생성자의 매개변수와 클래스의 필드 이름이 동일할때
	필드와 매개변수를 구분하기 위해 사용한다

메소드와 필드
	* 같은 객체의 메소드는 객체명. 없이 호출할수 있다
	* 같은 객체의 필드는 메소드에서 호출할수 있다
	* 같은 객체의 메소드에서 선언된 변수의 값을 사용하고 싶다면
	리턴값을 사용한다

this()
	같은 클래스안에 있는 생성자를 호출한다
	생성자 내부에서만 사용이 가능하며 최상단에 작성한다(제일 윗줄)

	-> 중복되는 코드를 제거하여 코드의 가독성을 높일수 있다

인스턴스(instance)와 객체(object)

	Bike bike1 = new Bike();

	bike1은 객체이다
	bike1은 Bike 클래스의 인스턴스이다

Static(정적인)

	클래스에 의존적인 요소(클래스에 고정되어있다)
	
	1. static 필드, static 메소드는 객체화 하지 않아도
	(객체를 생성하지 않아도) 사용할수 있다

	2. static 멤버(필드, 메소드)들은 객체를 생성할때
	메모리에 할당되는것이 아니라, 프로그램을 시작할때 컴파일러가
	할당한다. 그리고 해당 멤버들은 프로그램이 종료되면 메모리에서
	사라진다

	3. static 멤버들은 모든 객체가 공유해서 사용한다
	-> static 영역에 할당되기 때문에 모든 객체가 공유가능

필드의 종류
	1. static 키워드가 붙지 않은 필드
		인스턴스 필드
		* 객체명.필드명;

	2. static 키워드가 붙은 필드
		스태틱 필드(정적 변수)
		* 클래스명.필드명;

메소드의 종류
	1. static 키워드가 붙지 않은 메소드
		인스턴스 메소드
		* 객체명.메소드명();
	
	2. static 키워드가 붙은 메소드
		스태틱 메소드(정적 메소드)
		* 클래스명.메소드명();

		-> 인스턴스 필드를 사용할수 없다

변수의 종류
	1. 지역변수(local variable)
		메소드 또는 그안의 영역에서 선언된 변수

	2. 매개변수
		메소드의 소괄호 안에서 선언된 변수

	3. 인스턴스 변수
		클래스 영역에서 선언한 변수
		-> 객체 간 공유되지 않아 독립적으로 사용하고,
		객체화 후에 사용이 가능하다

	4. 스태틱 변수
		클래스 영역에서 선언한 변수(static 키워드가 붙은)
		-> 객체 간 공유해서 사용



	





































