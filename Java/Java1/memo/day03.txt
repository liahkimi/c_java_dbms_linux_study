day03. 입력메소드, 연산자

복습
	자료형
		1. 기본자료형
			정수형(int, long)
			실수형(double, float)
			논리형(boolean)
			문자형(char)

		2. 참조자료형
			문자열(String)
			
	형변환
		자료형을 변환한다
		1. 자동 형변환(묵시적 형변환)
			개발자가 형변환을 직접 작성하지
			않아도 자동적으로 형변환되는것

		2. 강제 형변환(명시적 형변환)
			개발자가 형변환을 직접 장석하여
			형변환하는것

		3. (자료형) 값 또는 변수
		4. 문자열의 형변환
			- 다른 자료형 -> 문자열 : 빈문자열("")
			와 연결시킨다
			- 문자열 -> 다른 자료형 : 해당 
			메소드를 사용한다

		입력메소드와 클래스
			- 입력 클래스
			Scanner sc = new Scanner(System.in);
			* import 후에 사용한다(ctrl + shift + o)
			
			- 입력 메소드
			next() : 콘솔창에 입력한 값을 문자열로
			반환한다(공백 또는 줄바꿈 문자를 기준으로
			문자열을 분리한다)
			nextLine() : 콘솔창에 입력한 값을 문자열로
			반환한다(공백 또는 줄바꿈 문자를 포함한다)

연산자(operator)

	기능이 있는 특수문자

연산자의 우선순위

	하나의 수식에 여러개의 연산자를 사용하면
	어떤 연산이 먼저 되는지를 구분한다

	최우선 연산자
	단항 연산자(피연산자가 1개)
	산술 연산자
	쉬프트 연산자
	관계 연산자(비교 연산자)
	논리 연산자
	삼항 연산자
	대입 연산자

	* 최 > 단 > 산 > 쉬 > 관 > 리 > 삼 > 대

최우선 연산자
	() 소괄호, [] 대괄호, . 점

	* () 소괄호 [] 대괄호 {} 중괄호

단항 연산자
	1. 부호(+, -)
		+ (양수), - (음수)
	
	2. 논리 부정(!)
		boolean에서 사용이 가능하다
		boolean 값을 반대로 바꾼다(참 -> 거짓, 거짓->참)
	
	3. 증감 연산자(++, --)
		피연산자의 값을 1씩 증가 또는 1씩 감소
		++ (증가연산자), -- (감소연산자)
		* 전위형 : 해당 라인부터 바로 적용(++a)
		* 후위형 : 다음 라인부터 적용(a++)
		* 일반적으로 후위형으로 많이 사용한다

산술연산자

	+	덧셈 연산자	a + b
	-	뺄셈 연산자	a - b
	*	곱셈 연산자	a * b
	/	나눗셈 연산자	a / b
	%	나머지 연산자	a % b

	- *, /, % 연산자가 +, - 연산자보다 우선순위가 높다
	- 피연산자의 타입이 일치하지 않을 경우 크기가 큰 
	자료형으로 자동 형변환하고 연산한다
	- 연산의 결과가 결과를 담는 변수의 크기를 벗어나지 않아
	야 한다. 그렇지 않으면 오버 플로우가 발생하거나 쓰레기값이
	입력된다
	
관계연산자(비교연산자)
	관계 연산자의 연산 결과는 참 또는 거짓이다

	1. 등가 연산자
		== 	같다 		a == b
		!= 	같지 않다		a != b

	2. 대소 연산자
		>, <	초과, 미만	a > b, a < b
		>=, <= 	이상, 이하	a >=b, a <= b

논리 연산자
	
	&&	AND	A && B	A와 B가 참이라면 참(그리고)
	||	OR	A || B	A와 B중에 하나라도 참이면 참(또는)
	
	* &&랑 ||을 같이 사용하면 &&가 우선순위가 높다

대입 연산자

	= : 왼쪽 저장공간에 오른쪽의 값을 저장한다
	-> 단, 두개의 자료형이 일치해야 한다

	복합 대입 연산자(누적 연산자)
	-> 공백없이 사용한다

	+=	a += b ( a = a + b )
	-=	a -= b ( a = a - b )
	*=	a *= b ( a = a * b )
	/=	a /= b ( a = a / b )
	%=	a %= b ( a = a % b )

쉬프트 연산자
	비트 연산 
	* 비트(bit) : 컴퓨터의 기본 최소 단위
	1bit로 표현할수 있는 수 0 또는 1(켜져있거나 꺼져있다)
	* 바이트(byte) : 의미있는 정보를 표현하는 최소 단위
	* 1byte = 8bit

	논리 연산자
		논리곱		&(AND)	두비트가 모두 1이면 1
		논리합		|(OR)	두 비트중 하나라도 1이면 1
		베타논리합	^(XOR)	두 비트가 서로 다르면 1

	단항 연산자
		논리부정		~(NOT)	0을 1로, 1을 0으로 바꾼다
		* 부호비트 또한 반대로 바꿔줌(양수는 음수로, 음수는 양수로)
		* ~a = -a-1

	최상위 비트(부호비트)
		양수는 0 음수는 1
	
	쉬프트 연산자
		>> (우쉬프트)
			ex) a >> b -> a를 오른쪽으로 b만큼 이동
		<< (좌쉬프트)
			ex) a << b -> a를 왼쪽으로 b만큼 이동
		
		* 빈자리는 음수인 경우 1, 양수인 경우 0으로 채워진다
		* 오른쪽으로 더이상 이동할수 없으면 버려진다

조건식
	결과가 참 또는 거짓, 둘 중 하나가 나오는식(코드)

삼항 연산자
	조건식 ? 참일 경우의 값 : 거짓일 경우의 값
	ex) int result = 10 > 9 ? 10 : 9;
	단, 참과 거짓 자리에 값만 작성할수 있다




















































