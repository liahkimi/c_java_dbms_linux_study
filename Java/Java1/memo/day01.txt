day01. 개발환경 구축, 자바 및 이클립스 설치, 주석, 변수

작업 환경 구축

	1. C 드라이브 또는 D 드라이브에 0930_JAVA1_sms으로 
	폴더 만들기
	2. 내부에 폴더 3개 만들기(memo, resource, workspace)
	3. memo 폴더→ 수업중에 작성한 메모장 파일
	4. resource 폴더 → 수업에 필요한 자료 등
	5. workspace 폴더 → 소스코드 저장

OT
	강사 : 서민성 강사
	수업 시수 : 4시간 * 8일 = 32시간
	수업 자료 : 오픈 카톡방(자료 및 줌링크)
	수업 방식 : 50분 수업 10분 쉬는시간
	이메일 : yup1yup1201@gmail.com
	제목 : 0930 자바1 홍길동(본인이름)
	내용 : 소스코드(본인이 작성한 코드 복사),
	에러메세지(에러 발생시 에러창 복사)
	기록 : 카톡방에 줌 링크로 공유(기록일로부터 30일 경과후 
	자동삭제)
	
프로그래밍 언어
	개발자와 컴퓨터가 소통하기 위한 언어

소스코드(Source Code)
	컴퓨터와 개발자가 소통할수 있는 언어를 작성해놓은것

컴파일
	사람의 언어를 컴퓨터의 언어로 번역해주는 작업

컴파일러
	컴파일 작업을 해주는 번역기

컴파일러의 해석방향
	위에서 아래로, 왼쪽에서 오른쪽으로

JAVA
	프로그래밍 언어 중 하나
	
	1. 객체 지향 언어
		하나의 기능을 객체로 만들고, 이러한 객체들을
		결합해서 하나의 프로그램을 완성하는것

	2. 단순성
		C, C++ 기반이나 상대적으로 문법이 단순

	3. 이식성
		JVM을 통해 운영체제의 종류와 상관없이 실행 가능

	4. 멀티 쓰레드

	5. 메모리 자동 관리(가비지 컬렉터 GC가 자동관리)

	6. 다양한 오픈 소스 라이브러리

프로그램의 동작

	개발자가 작성한 코드 -> 컴파일러를 통해 컴파일 
	-> 실행파일 -> 실행

	<일반 프로그램>
		소스코드 -> Windows 컴파일러 
		-> Windows 실행파일 -> 실행

		소스코드 -> Mac 컴파일러
		-> Mac 실행파일 -> 실행

	<자바 프로그램>
		소스코드 -> 자바 컴파일러 -> JVM -> 실행

JDK(Java Development Kit)
	- JVM(Java Virtual Machine)
		운영체제에 맞춰서 JAVA로 만든 프로그램을
		실행시켜준다(JAVA 가상 운영체제)

	- JRE(Java Runtime Enviroment)
		JVM을 실행한다(JAVA 실행 환경)
		JVM을 실행할때 필요한 라이브러리 파일등을
		가지고 있다

	- JDK(Java Development Kit)
		JRE을 포함한다(자바 개발 도구)
		JRE외에 개발에 필요한 도구들을 가지고 있다

	* JDK > JRE > JVM
	

JDK 설치 방법
	구글 검색창에 jdk 11 검색
	> 제일 상단의 오라클 홈페이지 접속
	> Windows x64 installer exe 파일 다운로드
	> Mac m1 칩 Arm 64 DMG 파일 다운로드
	> Max intel 칩 x64 DMG 파일 다운로드

	* 설치 프로그램을 실행하여 설치를 진행
	* 설치 경로중에 Program Files 경로를 지우고 설치

IDE(Integrated Development Enviroment)
	통합 개발 환경
	다양한 언어를 지원하는 프로그래밍 통합 개발 환경이자
	프로그래밍 도구

	Eclipse, Intellij.. (vs code는 코드 편집기)

이클립스(Eclipse) 설치방법

	구글 검색창에 eclipse 검색
	> 제일 상단의 eclipse.org 사이트 접속
	> 메인 페이지에서 download packages 클릭
	> Eclipse IDE for Enterprise Java and Web Developers 다운로드
	> Mac m1 칩 AArch64 다운로드
	> Mac intel 칩 x86_64 다운로드
	
이클립스 초기 설정
	1. Perspective(관점) 변경
		기본 JAVA EE에서 JAVA로 변경
	2. 컴파일러 변경
		Window > Preferences >검색창에 compiler 검색
		> level 17에서 11로 변경(설치된 jdk버전에 맞춰서 변경)
		> Apply and Close 클릭


자바의 기본 구조
	프로젝트 > 패키지 > 클래스 > 메소드 > 소스코드


	* 클래스는 앞글자(첫글자)가 대문자
	* 메소드는 이름뒤에 소괄호가 온다
	* 패키지는 시스템의 폴더와 같은 개념이다
		-> 동일 이름의 클래스가 존재할수 없지만 패키지별로
		클래스 이름을 중복해서 사용할수 있다
		-> 패키지명은 소문자이다

주석(comment)
	컴파일 되지 않기때문에(번역) 프로그램 실행에 영향을 주지 않는다

	1. 개발자간의 소통 -> 소스코드에 대한 설명글을 작성할때
	2. 지금 당장 사용하지 않는 코드가 있을때

세미콜론(;)
	자바에서는 세미콜론(;)으로 문장의 끝을 표시한다

중괄호
	* () 소괄호 {} 중괄호 [] 대괄호
	자바에서는 중괄호{}로 영역을 표시한다

들여쓰기
	자바에서는 들여쓰기는 코드에 영향을 주지 않는다
	코드의 가독성을 높이기 위해 사용한다
	자동 들여쓰기 ctrl + shift + f

콘솔(console)
	사용자와 운영체제가 소통한 결과를 나타내는 창


이클립스 단축키

	1. 새로운 파일 생성(프로젝트, 패키지, 클래스)
    		윈도우 : ctrl + n 
    		맥북 : command + n 
    
	2. 화면 축소 또는 확대
    		윈도우 : ctrl + - 또는 +
		맥북 : command + - 또는 + 
    
	3. 라인 한줄 삭제 
   		윈도우 : ctrl + d
    		맥북 : command + d
    
	4. 라인 한줄 이동
    		윈도우 : alt + 위아래 방향키
  		맥북 : option + 방향키
    
	5. 라인 한줄 복사
 		윈도우 : ctrl + alt + 위아래 방향키
   		맥북 : option + command + 방향키
    
	6. 저장
    		윈도우 : ctrl + s
		맥북: command + s
    
	7. 자동완성
    		윈도우: ctrl + space
 		맥북: 별도 설정
    
	8. 실행
		윈도우: ctrl + F11
		맥북: command + shift + fn + F11
    
	9. 파일 이름 변경
    		윈도우: F2
    		맥북: option + command + R

변수(Variable)
	값을 저장하는 저장공간

변수의 사용목적
	값을 재사용하기 위해서

변수의 특징
	1. 변수는 오직 하나의 값만 저장할수 있다
	2. 변수는 오직 하나의 자료형만 저장할수 있다

주소값
	메모리(RAM)에 저장공간이 할당되면 
	고유한 주소값이 부여된다
	-> 값은 변경될수 있으나 중복은 없다

	메모리 : Random Access Memory

변수의 선언
	자료형 변수명;
	ex) int age;

변수의 사용
	변수명 = 값;
	ex) age = 10;

	= : 대입연산자(할당연산자)
	왼쪽에 있는 저장공간에 오른쪽의 값을 저장한다

변수의 선언 및 초기화
	자료형 변수명 = 초기값;
	ex) int age = 10;
	
	초기화 : 처음으로 변수에 값을 저장하는것
	초기값 : 처음으로 변수에 저장되는 값

변수 선언시 주의사항
	같은 영역에서 같은 이름의 변수를 선언할수 없다
	되도록 소스코드 위쪽에 한꺼번에 선언한다
	되도록 선언과 초기화를 동시에 한다
	
	* 여러개의 동일 자료형의 변수 선언	
		자료형 변수명1, 변수명2, 변수명3...;

변수명 주의사항
	1. 문자부터 시작한다
	2. 특수문자를 쓸수 없다(단, _ 와 $는 사용가능)
	3. 공백(띄어쓰기)를 사용할수 없다
	4. 키워드(예약어)를 사용할수 없다
		-> if, while, int, double... 등
	5. 되도록이면 소문자로 시작한다(대소문자 구분)
	6. 되도록이면 의미있는 이름으로 작성한다
	7. 한글은 사용하지 않는다
	
	* 카멜표기법 : 공백을 가지게되는 글자를 대문자로
		userAge
		userName

	* 스네이크 표기법: 공백을 _(언더바)로 대신 사용
		user_age
		user_name

변수의 사용
	변수에 값을 저장하고 나서는 변수 자체를
	값으로 볼수 있어야한다

	int data = 70;		// 저장공간
	System.out.println(data+ 3);	// 값
	System.out.println(data);	// 값
	data = data + 27;		// 저장공간, 값
	System.out.println(data);	// 값

자료형
	자료(data)의 형태
	
	1. 기본자료형(primitive type)
		실제 데이터 값을 저장한다
		int, long, double, float, boolean, char

	2. 참조자료형(reference type)
		데이터가 저장되어 있는 주소값을 저장한다
		기본자료형을 제외한 나머지 자료형
		
		type	byte(크기)	값
	===================================
	정수형	int	4		1,2,3,-10,-21..
		long	8		1L, 2L, 3L, -10L..
	실수형	double	8		3.14, 0.09, -0.1..
		float	4		3.12f, 5.1f, 3.9f..
	문자형	char	2		'A', '가', 'c'...
	논리형	boolean	1		true, false
	-------------------------------------------------------------
	문자열	String			"안녕", "A"...

	* 문자형: 작은 따옴표로 감싸진 1개의 문자
	* 문자열 : 큰따옴표로 감싸진 0개 이상의 문자
	* 1byte = 8bit

	* int 와 long : 변수에 저장할, 즉 사용할 정수값의
	범위따라 사용한다(int < long)

	




































	




































 







		







































