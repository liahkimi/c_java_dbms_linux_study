day02. 복습, 출력메소드, 서식문자 및 제어문자, 형변환

복습
	변수(Variable)
		값을 저장하는 저장공간
		-> 값을 재사용하기 위해 사용한다

	변수의 특징
		변수는 오직 하나의 자료형의
		오직 하나의 값만 저장할수 있다

	변수 선언
		자료형 변수명;

	변수 사용
		변수명 = 값;
		* 선언된 변수는 반드시 초기화
		해야 사용이 가능하다

	변수 선언 및 사용
		자료형 변수명 = 값;
		* 변수명은 중복될수 없다

	자료형(type)
		1. 기본 자료형
			
		정수형	int(4byte), long(8byte)
		실수형	double(8byte), float(4byte)
		논리형	boolean(1byte)
		문자형	char(2byte)
		
		2. 참조 자료형
	
		문자열 	String(?)

상수(constant)

	항상 그대로인 수
	값을 변경할수 없도록 한다
	-> 초기값을 변경할수 없다

	final 자료형 상수명 = 초기값;

	ex) String myName = "홍길동";
	final int MY_AGE = 20;
	
	* 단 상수명은 전부 대문자로 약속한다
	상수명에서는 띄어쓰기를 _(언더바)로 표현한다

출력메소드
	메소드 : 기능
	소괄호 안에 있는 값을 콘솔창에 출력해주는 기능

	println()	: 전달된 값을 출력하고 줄바꿈이 된다
	print()	: 전달된 값을 출력하고 줄바꿈이 안된다
	printf()	: 형식(format)에 맞는 값을 출력하고
		줄바꿈이 안된다

출력메소드 사용목적
	개발자가 오류를 해결하기 위해 값을 확인할때 사용
	개발자가 원하는 결과를 얻기위해 값을 확인할때 사용

서식 문자
	출력 형식을 지정한다
	%로 시작하며 printf() 에서 사용한다
	반드시 큰 따옴표 안에서 작성한다
	
	%d	: decimal(10진수 정수)
	%o	: octal(8진수 정수)
	%x	: hexadecimal(16진수 정수)
	%f	: float(실수)
	%c	: character(문자)
	%s	: string(문자열)

	ex) System.out.printf("오늘의 날씨는 %s입니다", "맑음");
	* 형식지정자에 전달할 값은 , 뒤에서 작성한다

제어문자(Escape String)
	반드시 큰 따옴표 안에서 작성한다
	문자열 안에서 사용되며 미리 예약된 특수한 기능을
	하는 문자
	역슬래시(\)를 사용한다

	\n	: 줄바꿈. (개행문자)
	\t	: 일정 간격을 띄워준다(tab)
	\"	: 문자열 안에서 큰 따옴표를 표현
	\'	: 문자열 안에서 작은 따옴표를 표현
	\\	: 문자열 안에서 역슬래시를 표현

형변환
	자료형의 변환
	같은 자료형끼리만 연산이 가능하기 때문에 자료형을
	변환한다

	1. 자동 형변환 : 자동으로 자료형이 변환되는것(묵시적 형변환)
		-> 개발자가 형변환을 사용하지 않아도 자동으로 되는것
	2. 강제 형변환 : 강제로 자료형을 변환하는것(명시적 형변환)
		-> 개발자가 직접 형변환을 사용하는것

자동형변환(promotion)
	1. 작은 자료형 -> 큰 자료형
		ex) long num = 10;
		int 의 값 10을 long으로 자동 형변환 한후에
		long 타입의 변수 num에 저장한다

	2. 정수형 -> 실수형
		정수뒤에 소수점 첫번째 자리에 0이 붙는다
		ex) double num = 3;
		int 의 값 3을 double타입의 값 3.0으로 변환한 후에
		double 타입의 변수 num에 저장한다

	3. 정수 + 실수 = 실수
		ex) 3 + 5.2 = 8.2
		int의 값 3과 dobule의 값 5.2를 연산할수 없기때문에
		int의 값 3을 double의 값 3.0으로 자동 형변환 한후에
		8.2라는 연산의 결과를 얻어낸다

		int + double -> double + double = double

	4. 문자 + 정수 = 정수
		ex) 'A' + 3 = 68
		char 의 값 'A'와 int의 값 3을 연산할수 없기때문에
		char 의 값 'A'를 int의 값 65로 자동 형변환 한후에
		68이라는 연산의 결과를 얻어낸다

		char + int -> int + int = int

강제형변환(casting)
	
	(자료형)변수 또는 값
	
	* 큰 자료형 -> 작은 자료형으로 강제 형변환시
	데이터의 손실이 발생될수 있다

문자열의 형변환
	
	1. 다른 자료형 -> 문자열
		기본자료형과 빈 문자열을 연결(+)시켜서 형변환
		기본자료형 + ""(빈문자열)
		
		ex) 3 + "" = "3"

	2. 문자열 -> 다른 자료형
		문자열(String)은 기본자료형이 아니기때문에
		해당 클래스의 메소드로 형변환을 시킨다

		정수형 	: Integer.parseInt("문자열")
		실수형	: Double.parseDouble("문자열")
		논리형 	: Boolean.parseBoolean("문자열")
		문자형	: 문자열.charAt(자리번호)

		* 문자열의 문자는 자리번호를 가지고 있으며
		자리번호는 0번부터 시작한다
		* 해당 자료형의 값을 담은 문자열만 변환가능하다

입력 클래스
	
	import 후에 사용한다(ctrl + shift + o)
	-> import java.util.Scanner; 코드가 추가된다
	Scanner sc = new Scanner(System.in);
	
입력 메소드
	
	입력클래스 Scanner 클래스 내부에 메소드를 사용한다
	1. next() : 사용자가 입력한 값을 문자열로 가져온다
	사용자가 입력한 값중 공백 또는 줄바꿈 문자를 구분점으로 
	각 문자를 여러개의 문자열로 분리한다

	2. nextLine() : 사용자가 입력한 값을 문자열로 가져온다
	공백 또는 줄바꿈 문자도 포함하여 하나의 문자열로 가져온다

	* 입력하기전에 출력메소드를 통해서 어떤값을 입력할지
	사용자에게 알려준다












		











































































